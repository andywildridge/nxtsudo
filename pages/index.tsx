import { useState } from 'react';
import Head from 'next/head'
// import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import { initVals } from '../utils/sudokuSolver'
import { indexToRow, indexToCol, indexToBox, groupIndeces } from '../utils/indexTransforms'
import { analyse } from "../utils/analyse";

const inter = Inter({ subsets: ['latin'] })

const grid: ReadonlyArray<undefined> = new Array(81).fill(undefined);

let removePoss = (idx: number, nums: Array<number>, possibles: Map<number, Set<number>>) => {
  nums.forEach(n=>{
    possibles.get(idx)?.delete(n);
  })
}

export default function Home() {
  const [ sudoState, setSudoState ] = useState(initVals);

  const solveSquare = ((idx: number)=>{
    const { initialClues, solved, possibles, solvable, removable } = sudoState;
    if(!solvable[idx]) { return false; }
    const num = solvable[idx][0].number;
    solved.set(idx, num);
    possibles.delete(idx);
    groupIndeces['row'](indexToRow(idx).idx).forEach((i: number)=>removePoss(i,[num],possibles));
    groupIndeces['col'](indexToCol(idx).idx).forEach((i: number)=>removePoss(i,[num],possibles));
    groupIndeces['box'](indexToBox(idx).idx).forEach((i: number)=>removePoss(i,[num],possibles));
    const newanalysis = analyse(possibles);

    console.log('new',newanalysis);
    setSudoState({
      ...sudoState,
      possibles,
      solved,
      solvable: newanalysis.solvable,
      removable: newanalysis.removable
    });
    return true;
  })

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="m-auto">
        <div className={styles.description}>
          <h1 className="text-3xl font-bold underline">
            Sudoku! {grid.length}
          </h1>
        </div>
        <div className="w-[400px] m-auto ">
          <div className="[&>*:nth-child(odd)]:border-dashed [&>*:nth-child(odd)]:border-2 [&>*:nth-child(odd)]:border-indigo-600 bcontainer m-auto grid grid-cols-9">
            {
              grid.map((i:undefined, idx: number) => {
                const solved = sudoState.solved.get(idx);
                const possibles = [...(sudoState.possibles.get(idx) || [])];  // handle destrucure undefined 
                const squareStyle = `${sudoState.initialClues?.includes(idx) ? 'font-bold' : ''} ${sudoState.solvable[idx] ?  'bg-red-100' : ''}`;
                return <div className={squareStyle} key={idx} onClick={()=>solveSquare(idx)}>{solved && solved}{
                  possibles.map((possible: number, idx: number) => (
                    <div className="text-xs inline-block text-red-600" key={idx}>{possible}</div>
                  ))
                }</div>
              })}
          </div>
        </div>
      </main>
    </>
  )
}
